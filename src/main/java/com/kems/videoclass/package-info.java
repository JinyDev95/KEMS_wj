/**
 * 계층별 설명
 *
 * 1. 도메인 계층 (Domain Layer)
 * 주요 역할: 시스템의 핵심 비즈니스 로직을 담당하는 계층입니다.
 * 비즈니스 규칙을 직접 구현하며, 시스템의 상태와 행위를 정의하는 엔티티(Entity),
 * 값 객체(Value Object), 도메인 서비스 등이 위치합니다.
 *
 * 구성 요소:
 * - 엔티티(Entity): 고유 식별자를 가지며, 시스템에서 관리되는 상태와 행위를 포함합니다.
 *   // 관리의 편의성과 실용성 및 변화 빈도를 고려해 레포지토리 계층으로 이동합니다.
 * - 값 객체(Value Object, VO): 고유 식별자가 없으며, 값 그 자체로 의미가 있는 객체입니다.
 * - 도메인 서비스: 여러 엔티티와 VO 간의 복잡한 비즈니스 로직을 처리하는 서비스입니다.
 *
 * 책임:
 * - 비즈니스 규칙을 중심으로 도메인의 상태를 관리합니다.
 * - 시스템 내의 상태 변화를 처리하고, 비즈니스 로직의 불변성을 유지합니다.
 *
 * 2. 어플리케이션 계층 (Application Layer)
 * 주요 역할: 시스템의 비즈니스 흐름을 조정하는 계층입니다. 비즈니스 로직을 직접 포함하지 않고,
 * 도메인 계층을 호출하여 비즈니스 프로세스를 수행합니다. 사용자의 요청을 받아 필요한 서비스를 호출하고,
 * 외부와 상호작용(예: API 호출, 메시지 처리 등)하며, 트랜잭션 관리를 담당합니다.
 *
 * 구성 요소:
 * - 어플리케이션 서비스: 시스템에서 특정 비즈니스 기능을 실행하고, 도메인 계층의 객체를 호출하여 필요한 작업을 수행합니다.
 * - DTO: 외부와의 데이터 전송을 위한 객체입니다. 도메인 객체를 외부에 노출하지 않고 변환하여 전달합니다.
 *
 * 책임:
 * - 비즈니스 로직을 실행하기 위한 도메인 객체와의 상호작용을 관리합니다.
 * - 여러 도메인 객체나 서비스 간의 조율 및 외부 시스템과 통신합니다.
 * - 트랜잭션 관리: 작업이 성공적으로 완료되면 커밋하고, 실패하면 롤백 처리합니다.
 *
 * 3. 레포지토리 계층 (Repository Layer)
 * 주요 역할: 데이터베이스 접근을 추상화하는 계층입니다. 도메인 객체를 저장하거나 조회하는 작업을 담당합니다.
 * 도메인 계층의 엔티티를 영속화하고, 데이터베이스와 상호작용하는 구체적인 구현을 캡슐화합니다.
 *
 * 구성 요소:
 * - 레포지토리 인터페이스: CRUD 작업을 위한 메서드를 정의합니다.
 *   // 변화가 최소화 되어야 하는 고수준 컴포넌트로 어플리케이션 계층으로 이동합니다.
 * - 레포지토리 구현체: 데이터베이스와의 상호작용을 처리하는 구체적인 로직입니다.
 * - JPA 인터페이스: 도메인 객체를 사용하여 데이터베이스와 상호작용합니다.
 *
 * 책임:
 * - 데이터베이스로부터 도메인 객체를 가져오거나 저장하는 작업을 수행합니다.
 * - 데이터를 도메인 객체로 변환하거나, 도메인 객체를 데이터베이스에 적절히 저장합니다.
 *
 * 4. 프레젠테이션 계층 (Presentation Layer) // 간단하게 UI 계층으로 표현합니다.
 * 역할: 사용자와 상호작용하며, 사용자 입력을 수신하고 응답을 생성합니다.
 * // MVC 패턴에서, 컨트롤러는 모델(Model)과 뷰(View) 사이의 중재자 역할을 합니다.
 *
 * 구성 요소:
 * - 컨트롤러 (Controller)
 *
 * 책임:
 * - 클라이언트의 요청을 처리하고, 서비스 계층에 전달합니다.
 * - 서비스 결과를 클라이언트에 반환합니다.
 * - 요청 유효성 검사 및 오류 처리를 수행합니다.
 */

package com.kems.videoclass;
